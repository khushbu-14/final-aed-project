/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Restaurant.Restaurant;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author khushbu
 */
public class SystemAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminWorkAreaJPanel
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;

    public SystemAdminWorkAreaJPanel(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;

        treePane.setVisible(false);

        manageCustomer();
//        populateTree();
    }

    public void populateTree() {
        DefaultTreeModel model = (DefaultTreeModel) jTree.getModel();
        // Add the code for draw your system structure shown by JTree

        ArrayList<Customer> customerList = ecosystem.getCustomerDirectory().getCustomerList();

        ArrayList<Restaurant> restaurantList = ecosystem.getRestaurantDirectory().getRestaurantList();

        ArrayList<DeliveryMan> deliveryManList = ecosystem.getDeliveryManDirectory().getDeliveryManList();

        Customer customer;
        Restaurant restaurant;
        DeliveryMan deliveryMan;
        List<WorkRequest> workRequestList;

        DefaultMutableTreeNode customers = new DefaultMutableTreeNode("Customers");
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        root.insert(customers, 0);

        DefaultMutableTreeNode networkNode;
        DefaultMutableTreeNode orderNode;

        for (int i = 0; i < customerList.size(); i++) {
            customer = customerList.get(i);
            networkNode = new DefaultMutableTreeNode(customer.getName());
            customers.insert(networkNode, i);

            workRequestList = ecosystem.getWorkQueue().getCustomerRequestList(customer);
            int count = 0;
            for (WorkRequest req : workRequestList) {
                String txt = req.getRestaurant().getName() + " - " + req.getStatus();
                orderNode = new DefaultMutableTreeNode(txt);
                networkNode.insert(orderNode, count);
                count++;
            }
        }

        DefaultMutableTreeNode restaurants = new DefaultMutableTreeNode("Restaurants");
        root.insert(restaurants, 1);

        for (int i = 0; i < restaurantList.size(); i++) {
            restaurant = restaurantList.get(i);
            networkNode = new DefaultMutableTreeNode(restaurant.getName());
            restaurants.insert(networkNode, i);

            workRequestList = ecosystem.getWorkQueue().getRestaurantRequestList(restaurant);
            int count = 0;
            for (WorkRequest req : workRequestList) {
                String txt = req.getCustomer().getName() + " - " + req.getStatus();
                orderNode = new DefaultMutableTreeNode(txt);
                networkNode.insert(orderNode, count);
                count++;
            }
        }

        DefaultMutableTreeNode deliveryMans = new DefaultMutableTreeNode("Delivery Man");
        root.insert(deliveryMans, 2);

        for (int i = 0; i < deliveryManList.size(); i++) {
            deliveryMan = deliveryManList.get(i);
            networkNode = new DefaultMutableTreeNode(deliveryMan.getName());
            deliveryMans.insert(networkNode, i);

            workRequestList = ecosystem.getWorkQueue().getDeliveryManRequestList(deliveryMan);
            int count = 0;
            for (WorkRequest req : workRequestList) {
                String name = req.getCustomer().getName() + " - " + req.getRestaurant().getName();
                orderNode = new DefaultMutableTreeNode(name);
                networkNode.insert(orderNode, count);
            }

            model.reload();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminPanel = new javax.swing.JPanel();
        navbar = new javax.swing.JPanel();
        btnCustomer = new javax.swing.JButton();
        btnRestaurant = new javax.swing.JButton();
        btnDeliveryMan1 = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        adminPanel.setBackground(new java.awt.Color(237, 255, 236));

        navbar.setBackground(new java.awt.Color(204, 255, 204));

        btnCustomer.setBackground(new java.awt.Color(255, 255, 255));
        btnCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/consumer.png"))); // NOI18N
        btnCustomer.setText("Customer");
        btnCustomer.setToolTipText("View Customer list");
        btnCustomer.setAlignmentY(0.0F);
        btnCustomer.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 1, 0));
        btnCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCustomer.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCustomer.setIconTextGap(10);
        btnCustomer.setMargin(new java.awt.Insets(10, 5, 0, 2));
        btnCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerActionPerformed(evt);
            }
        });

        btnRestaurant.setBackground(new java.awt.Color(255, 255, 255));
        btnRestaurant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/dinner.png"))); // NOI18N
        btnRestaurant.setText("Restaurants");
        btnRestaurant.setToolTipText("View Restaurants list");
        btnRestaurant.setAlignmentY(0.0F);
        btnRestaurant.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 1, 0));
        btnRestaurant.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnRestaurant.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnRestaurant.setIconTextGap(10);
        btnRestaurant.setMargin(new java.awt.Insets(10, 5, 0, 2));
        btnRestaurant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurantActionPerformed(evt);
            }
        });

        btnDeliveryMan1.setBackground(new java.awt.Color(255, 255, 255));
        btnDeliveryMan1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/delivery-man.png"))); // NOI18N
        btnDeliveryMan1.setText("Delivery Man");
        btnDeliveryMan1.setToolTipText("View Delivery Man list");
        btnDeliveryMan1.setAlignmentY(0.0F);
        btnDeliveryMan1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 1, 0));
        btnDeliveryMan1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnDeliveryMan1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDeliveryMan1.setIconTextGap(10);
        btnDeliveryMan1.setMargin(new java.awt.Insets(10, 5, 0, 2));
        btnDeliveryMan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryMan1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout navbarLayout = new javax.swing.GroupLayout(navbar);
        navbar.setLayout(navbarLayout);
        navbarLayout.setHorizontalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbarLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnDeliveryMan1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(211, 211, 211))
        );
        navbarLayout.setVerticalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRestaurant, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeliveryMan1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(navbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addComponent(navbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 279, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293))
        );

        add(adminPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerActionPerformed
        // TODO add your handling code here:
//        treePane.setVisible(true);
        manageCustomer();
    }//GEN-LAST:event_btnCustomerActionPerformed

    private void btnRestaurantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurantActionPerformed
//        treePane.setVisible(false);
        manageRestaurants();
    }//GEN-LAST:event_btnRestaurantActionPerformed

    private void btnDeliveryMan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryMan1ActionPerformed
        // TODO add your handling code here:
        manageDeliveryMan();
    }//GEN-LAST:event_btnDeliveryMan1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel adminPanel;
    private javax.swing.JButton btnCustomer;
    private javax.swing.JButton btnDeliveryMan1;
    private javax.swing.JButton btnRestaurant;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel navbar;
    // End of variables declaration//GEN-END:variables

    private void manageCustomer() {
        changeBtnBgs("customer");
        userinterface.SystemAdminWorkArea.ManageCustomerPanel manageCustomer = new userinterface.SystemAdminWorkArea.ManageCustomerPanel(mainPanel, ecosystem);

        mainPanel.add("ManageCustomerJPanel", manageCustomer);

        CardLayout layout = (CardLayout) mainPanel.getLayout();
        layout.next(mainPanel);
    }

    private void manageRestaurants() {
        changeBtnBgs("restaurant");
        userinterface.SystemAdminWorkArea.ManageRestaurantsPanel manageRestaurant = new userinterface.SystemAdminWorkArea.ManageRestaurantsPanel(mainPanel, ecosystem);

        mainPanel.add("ManageRestaurantPanel", manageRestaurant);

        CardLayout layout = (CardLayout) mainPanel.getLayout();
        layout.next(mainPanel);
    }

    private void manageDeliveryMan() {
        changeBtnBgs("delivery");
        userinterface.SystemAdminWorkArea.ManageDeliveryManPanel manageDeliveryManPanel = new userinterface.SystemAdminWorkArea.ManageDeliveryManPanel(mainPanel, ecosystem);

        mainPanel.add("ManageDeliveryManPanel", manageDeliveryManPanel);

        CardLayout layout = (CardLayout) mainPanel.getLayout();
        layout.next(mainPanel);
    }

    private void manageTree() {
        changeBtnBgs("tree");
        userinterface.SystemAdminWorkArea.ManageTreePanel manageTreePanel = new userinterface.SystemAdminWorkArea.ManageTreePanel(userProcessContainer, ecosystem);

        mainPanel.add("ManageTreePanel", manageTreePanel);

        CardLayout layout = (CardLayout) mainPanel.getLayout();
        layout.next(mainPanel);
    }

    private void changeBtnBgs(String type) {
        Color activeColor = Color.getColor("eabf9f");
        Color notActiveColor = Color.WHITE;

        btnCustomer.setBackground(notActiveColor);
        btnDeliveryMan1.setBackground(notActiveColor);
        btnRestaurant.setBackground(notActiveColor);
        btnTree.setBackground(notActiveColor);

        if ("customer".equals(type)) {
            btnCustomer.setBackground(activeColor);
        } else if ("delivery".equals(type)) {
            btnDeliveryMan1.setBackground(activeColor);
        } else if (type.equals("restaurant")) {
            btnRestaurant.setBackground(activeColor);
        } else if (type.equals("tree")) {
            btnTree.setBackground(activeColor);
        }
    }
}
