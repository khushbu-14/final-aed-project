/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import userinterface.SystemAdminWorkArea.*;
import Business.EcoSystem;
import Business.Hospital.Department.HospitalDepartment;
import Business.Hospital.Hospital;
import Business.Hospital.HospitalDirectory;
import Business.Staff.Sessions;
import Business.Staff.SessionsMedStaff;
import Business.Staff.Staff;
import Business.User.User;
import Business.User.UserDirectory;
import Business.UserAccount.UserAccount;
import constants.Utils;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import static userinterface.CustomerRole.SelectConsultationPanel.now;
import userinterface.StaffRole.AddHospStaffSessionsPanel;

/**
 *
 * @author khushbu
 */
public class ManageUserConsultationPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserPanel
     */
    UserDirectory userDirectory;
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccount userAccount;
    Utils utils;
    DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
    Date date;
    Staff staff;

    public ManageUserConsultationPanel(JPanel parentContainerPanel, EcoSystem ecosystem, UserAccount userAccount) {
        this.userProcessContainer = parentContainerPanel;
        this.ecosystem = ecosystem;
        utils = new Utils();
        this.userAccount = userAccount;
        initComponents();
        date = new Date();
        
        try {
            //DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/YYYY");
            date = formatter.parse(formatter.format(date));
        } catch (ParseException ex) {
            Logger.getLogger(AddHospStaffSessionsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSession = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnAddUser = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();

        setBackground(new java.awt.Color(244, 249, 249));

        tblSession.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tblSession.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sr No", "Session Name", "Date", "Start-time", "End-time", "Session Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSession.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblSession.setSelectionBackground(new java.awt.Color(0, 102, 204));
        jScrollPane1.setViewportView(tblSession);

        btnDelete.setBackground(new java.awt.Color(255, 204, 204));
        btnDelete.setForeground(new java.awt.Color(102, 102, 102));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/delete-1.png"))); // NOI18N
        btnDelete.setText("Cancel Consultation");
        btnDelete.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 204), 1, true));
        btnDelete.setBorderPainted(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAddUser.setBackground(new java.awt.Color(255, 255, 255));
        btnAddUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/plus.png"))); // NOI18N
        btnAddUser.setText("Book New Consultation");
        btnAddUser.setToolTipText("Add User");
        btnAddUser.setAlignmentY(0.0F);
        btnAddUser.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 1, 0));
        btnAddUser.setBorderPainted(false);
        btnAddUser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnAddUser.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAddUser.setIconTextGap(10);
        btnAddUser.setMargin(new java.awt.Insets(10, 5, 0, 2));
        btnAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddUserActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setText(" Manage Consultations");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(165, 165, 165)
                        .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(452, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int getSelectedRow() {
        int selectedRowIndex = tblSession.getSelectedRow();
        return selectedRowIndex;
    }

    private SessionsMedStaff getSelectedSession() {
        int selectedRowIndex = tblSession.getSelectedRow();

        if (selectedRowIndex < 0) {
            utils.showErrorToast("Oops! Please select a User first.");
            return null;
        }

        SessionsMedStaff u = (SessionsMedStaff) tblSession.getValueAt(selectedRowIndex, 1);

        return u;
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        SessionsMedStaff u = getSelectedSession();
        Date date1 = null;
        try {
              date1 = (Date)formatter.parse(u.getSessionDate());
            } catch (ParseException ex) {
                Logger.getLogger(SelectConsultationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        if (u != null) {
            if(date1.before(date)){
            utils.showErrorToast("Oops! Cancelation Period Expired");
            }else if(date1.equals(date)){
                String startTime = u.getStartTime();
                Boolean f = utils.testTime(startTime.split(":")[0]);
                if(f==false){
                    utils.showErrorToast("Oops! Cancelation Period Expired");
                }else{
            User ud = ecosystem.getUserDirectory().getUserByUserName(userAccount.getUsername());
            ud.getConsultationSessions().removeSession(u);
                    ArrayList<Hospital> hospList = ecosystem.getHospitalDirectory().getHospitalList();
                    for(Hospital h: hospList){
                        ArrayList<HospitalDepartment> hdList = h.getDepartmentDirectory().getDepartmentList();
                        for(HospitalDepartment d:hdList ){
                            staff = d.getStaffDirectory().getStaffByUserName(u.getDocsIdentifier());
                        }
                    }
            staff.getSessionDirectory().addSession(u);
            u.setStatus("Cancelled");
            JOptionPane.showMessageDialog(this, "Session deleted successfully!");
            populateTable();
                    utils.setDatabase(ecosystem);
                }
            }  else{
            User ud = ecosystem.getUserDirectory().getUserByUserName(userAccount.getUsername());
            ud.getConsultationSessions().removeSession(u);
                    ArrayList<Hospital> hospList = ecosystem.getHospitalDirectory().getHospitalList();
                    for(Hospital h: hospList){
                        ArrayList<HospitalDepartment> hdList = h.getDepartmentDirectory().getDepartmentList();
                        for(HospitalDepartment d:hdList ){
                            staff = d.getStaffDirectory().getStaffByUserName(u.getDocsIdentifier());
                        }
                    }
            staff.getSessionDirectory().addSession(u);
            u.setStatus("Cancelled");
            JOptionPane.showMessageDialog(this, "Session deleted successfully!");
            populateTable();
                }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    public void refreshTable() {
        populateTable();
    }

    private void populateTable() {
        User user = ecosystem.getUserDirectory().getUserByUserName(userAccount.getUsername());
        ArrayList<SessionsMedStaff> sessList = user.getConsultationSessions().getSession();
        if (sessList != null) {
            DefaultTableModel model = (DefaultTableModel) tblSession.getModel();

            model.setRowCount(0);
            int count = 1;

            for (SessionsMedStaff s : sessList) {
                if(s.getStatus().equalsIgnoreCase("new")){
                Object[] row = new Object[7];
                row[0] = "" + count++;
                row[1] = s;
                row[2] = s.getSessionDate();
                row[3] = s.getStartTime();
                row[4] = s.getEndTime();
                row[5] = s.getIsRemote();
                row[6] = s.getStatus();

                model.addRow(row);
            }
            }
        }
    }

    private void btnAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddUserActionPerformed
        // logic to go to next screen
        BookConsultaionPanel bookconsultation = new BookConsultaionPanel(userProcessContainer, ecosystem,userAccount);
        userProcessContainer.add("Bookconsultation", bookconsultation);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAddUserActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddUser;
    private javax.swing.JButton btnDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblSession;
    // End of variables declaration//GEN-END:variables
}
