/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.User.User;
import constants.Utils;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.ManageUserPanel;

/**
 *
 * @author khushbu
 */
public class AddMedicalInfoPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddPersonalInfoPanel
     */
    private JPanel mainWorkArea;
    private EcoSystem ecosystem;

    Utils util;
    private User user;
    private ArrayList<String> detailsList = new ArrayList<>();
    private ArrayList<String> allergiesList = new ArrayList<>();
    private ArrayList<String> currentMedList = new ArrayList<>();
    private ArrayList<String> pastMedList = new ArrayList<>();
    private ArrayList<String> chronicDiseaseList = new ArrayList<>();
    private ArrayList<String> surgeriesList = new ArrayList<>();
    private ArrayList<String> allergiesList1 = new ArrayList<>();
    private ArrayList<String> currentMedList1 = new ArrayList<>();
    private ArrayList<String> pastMedList1 = new ArrayList<>();
    private ArrayList<String> chronicDiseaseList1 = new ArrayList<>();
    private ArrayList<String> surgeriesList1 = new ArrayList<>();
    private String selectedValue;
    Boolean isUpdatePage = false;
    Boolean isRecordExist = false;
    Boolean flag;

    public AddMedicalInfoPanel(JPanel mainWorkArea, EcoSystem ecosystem, User user) {
        this.mainWorkArea = mainWorkArea;
        this.ecosystem = ecosystem;
        this.user = user;
        initComponents();
        util = new Utils();
        this.allergiesList = user.getMedicalProfile().getAllergyList();
        this.currentMedList = user.getMedicalProfile().getCurrentMedicationList();
        this.pastMedList = user.getMedicalProfile().getPastMedicationList();
        this.chronicDiseaseList = user.getMedicalProfile().getChronicDiseaseList();
        this.surgeriesList = user.getMedicalProfile().getSurgeriesyList();
        jPanelAdd.setVisible(false);
        btnSubmit.setVisible(false);
        btnClose.setVisible(false);
        btnNext.setEnabled(true);
        populateViewTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelAdd = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        addedTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcomboBoxList = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ViewTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();

        setBackground(new java.awt.Color(243, 241, 249));

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "List"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(listTable);

        addedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Added"
            }
        ));
        jScrollPane2.setViewportView(addedTable);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAddLayout = new javax.swing.GroupLayout(jPanelAdd);
        jPanelAdd.setLayout(jPanelAddLayout);
        jPanelAddLayout.setHorizontalGroup(
            jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAddLayout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelAddLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelAddLayout.setVerticalGroup(
            jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAddLayout.createSequentialGroup()
                .addGroup(jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAddLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelAddLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanelAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel1.setText("Select one if applicable");

        jcomboBoxList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Allergies", "CurrentMedication", "PastMedication", "ChronicDisease", "Surgeries" }));
        jcomboBoxList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboBoxListActionPerformed(evt);
            }
        });

        ViewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Available Data"
            }
        ));
        jScrollPane1.setViewportView(ViewTable);

        jButton1.setText("Delete Record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnNext.setText("New Record");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jcomboBoxList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcomboBoxList, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jPanelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(254, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int getSelectedRow() {
        int selectedRowIndex = ViewTable.getSelectedRow();
        return selectedRowIndex;
    }
    private void jcomboBoxListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboBoxListActionPerformed
        // TODO add your handling code here:
        selectedValue = jcomboBoxList.getSelectedItem().toString();
        populateViewTable();
        populateListTable();

    }//GEN-LAST:event_jcomboBoxListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //        DefaultTableModel model = (DefaultTableModel) ViewTable.getModel();
        //        model.setRowCount(0);
        int selectedRowIndex = ViewTable.getSelectedRow();
        if (selectedRowIndex < 0) {
            util.showErrorToast("Oops! Please select a record first first.");
            populateViewTable();
        } else {
            String s = (String) ViewTable.getValueAt(selectedRowIndex, 0);
            selectedValue = jcomboBoxList.getSelectedItem().toString();
            if (selectedValue.toLowerCase().equals("allergies")) {
                user.getMedicalProfile().removeAllergies(s);
            } else if (selectedValue.toLowerCase().equals("currentmedication")) {
                user.getMedicalProfile().removeCurrentMedication(s);
            } else if (selectedValue.toLowerCase().equals("pastmedication")) {
                user.getMedicalProfile().removePastMedications(s);
            } else if (selectedValue.toLowerCase().equals("chronicdisease")) {
                user.getMedicalProfile().removeChronicDisease(s);
            } else if (selectedValue.toLowerCase().equals("surgeries")) {
                user.getMedicalProfile().removeSurgeries(s);
            }
            JOptionPane.showMessageDialog(this, "Record removed successfully",
                    "Success", JOptionPane.INFORMATION_MESSAGE);
            populateViewTable();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        jPanelAdd.setVisible(true);
        btnSubmit.setVisible(true);
        btnClose.setVisible(true);
        btnNext.setEnabled(false);
        populateListTable();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) addedTable.getModel();
        model.setRowCount(0);
        int selectedRowIndex = listTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            util.showErrorToast("Oops! Please select a record first first.");

        }

        if (selectedValue.toLowerCase().equals("allergies")) {
            String s = (String) listTable.getValueAt(selectedRowIndex, 0);
            if (allergiesList.size() > 0) {
                if (allergiesList.contains(s) || allergiesList1.contains(s)) {
                    util.showErrorToast("Oops! Record is already   Present");
                    for (String st : allergiesList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);

                    }
                } else {
                    allergiesList1.add(s);
                    for (String st : allergiesList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);
                    }
                }
            } else {
                allergiesList1.add(s);
                for (String st : allergiesList1) {
                    Object[] row = new Object[1];
                    row[0] = st;
                    model.addRow(row);
                }
            }

        } else if (selectedValue.toLowerCase().equals("currentmedication")) {
            String s = (String) listTable.getValueAt(selectedRowIndex, 0);
            if (currentMedList.size() > 0) {
                if (currentMedList.contains(s) || currentMedList1.contains(s)) {
                    util.showErrorToast("Oops! Record is already   Present");
                    for (String st : currentMedList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);

                    }
                } else {
                    currentMedList1.add(s);
                    for (String st : currentMedList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);
                    }
                }
            } else {
                currentMedList1.add(s);
                for (String st : currentMedList1) {
                    Object[] row = new Object[1];
                    row[0] = st;
                    model.addRow(row);
                }
            }
        } else if (selectedValue.toLowerCase().equals("pastmedication")) {
            String s = (String) listTable.getValueAt(selectedRowIndex, 0);
            if (pastMedList.size() > 0) {
                if (pastMedList.contains(s) || pastMedList1.contains(s)) {
                    util.showErrorToast("Oops! Record is already Present");
                    for (String st : pastMedList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);

                    }
                } else {
                    pastMedList1.add(s);
                    for (String st : pastMedList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);
                    }
                }
            } else {
                pastMedList1.add(s);
                for (String st : pastMedList1) {
                    Object[] row = new Object[1];
                    row[0] = st;
                    model.addRow(row);
                }
            }
        } else if (selectedValue.toLowerCase().equals("chronicdisease")) {
            String s = (String) listTable.getValueAt(selectedRowIndex, 0);
            if (chronicDiseaseList.size() > 0) {
                if (chronicDiseaseList.contains(s) || chronicDiseaseList1.contains(s)) {
                    util.showErrorToast("Oops! Record is already Present");
                    for (String st : chronicDiseaseList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);

                    }
                } else {
                    chronicDiseaseList1.add(s);
                    for (String st : chronicDiseaseList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);
                    }
                }
            } else {
                chronicDiseaseList1.add(s);
                for (String st : chronicDiseaseList1) {
                    Object[] row = new Object[1];
                    row[0] = st;
                    model.addRow(row);
                }
            }
        } else if (selectedValue.toLowerCase().equals("surgeries")) {
            String s = (String) listTable.getValueAt(selectedRowIndex, 0);
            if (surgeriesList.size() > 0) {
                if (surgeriesList.contains(s) || surgeriesList1.contains(s)) {
                    util.showErrorToast("Oops! Record is already Present");
                    for (String st : surgeriesList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);

                    }
                } else {
                    surgeriesList1.add(s);
                    for (String st : surgeriesList1) {
                        Object[] row = new Object[1];
                        row[0] = st;
                        model.addRow(row);
                    }
                }
            } else {
                surgeriesList1.add(s);
                for (String st : surgeriesList1) {
                    Object[] row = new Object[1];
                    row[0] = st;
                    model.addRow(row);
                }
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        if (allergiesList1.size() == 0 && currentMedList1.size() == 0 && pastMedList1.size() == 0 && chronicDiseaseList1.size() == 0 && surgeriesList1.size() == 0) {
            util.showErrorToast("Oops! Please add some data into table first");
        } else {
            for (String st : allergiesList1) {
                if (!user.getMedicalProfile().getAllergyList().contains(st)) {
                    user.getMedicalProfile().addAllergies(st);
                }

            }
            for (String st : chronicDiseaseList1) {
                if (!user.getMedicalProfile().getChronicDiseaseList().contains(st)) {
                    user.getMedicalProfile().addChronicDisease(st);
                }

            }
            for (String st : surgeriesList1) {
                if (!user.getMedicalProfile().getSurgeriesyList().contains(st)) {
                    user.getMedicalProfile().addSurgeries(st);
                }

            }
            for (String st : currentMedList1) {
                if (!user.getMedicalProfile().getCurrentMedicationList().contains(st)) {
                    user.getMedicalProfile().addCurrentMedication(st);
                }

            }
            for (String st : pastMedList1) {
                if (!user.getMedicalProfile().getPastMedicationList().contains(st)) {
                    user.getMedicalProfile().addPastMedications(st);
                }

            }
            DefaultTableModel model = (DefaultTableModel) addedTable.getModel();
            model.setRowCount(0);
            allergiesList1.clear();
            currentMedList1.clear();
            pastMedList1.clear();
            chronicDiseaseList1.clear();
            surgeriesList1.clear();
            JOptionPane.showMessageDialog(this, "Records Added successfully",
                    "Success", JOptionPane.INFORMATION_MESSAGE);
            
            populateViewTable();
             String emailSubject = "Care4U Account Information";
            String emailBodyMessage = "Hi, "+ user.getName()+" Records Updates successfully";
            util.sendEmail(user.getEmail(), emailSubject, emailBodyMessage);
            util.setDatabase(ecosystem);

        }

    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        btnNext.setEnabled(true);
        jPanelAdd.setVisible(false);
        btnSubmit.setVisible(false);
        btnClose.setVisible(false);

        allergiesList1.clear();
        currentMedList1.clear();
        pastMedList1.clear();
        chronicDiseaseList1.clear();
        surgeriesList1.clear();
        DefaultTableModel model = (DefaultTableModel) addedTable.getModel();
        model.setRowCount(0);

    }//GEN-LAST:event_btnCloseActionPerformed

    private void backAction() {
        mainWorkArea.remove(this);
        Component[] componentArray = mainWorkArea.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageUserPanel manageUserPanel = (ManageUserPanel) component;

        manageUserPanel.refreshTable();

        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.previous(mainWorkArea);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ViewTable;
    private javax.swing.JTable addedTable;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAdd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> jcomboBoxList;
    private javax.swing.JTable listTable;
    // End of variables declaration//GEN-END:variables
    public void populateViewTable() {
        DefaultTableModel model = (DefaultTableModel) ViewTable.getModel();
        model.setRowCount(0);
        selectedValue = jcomboBoxList.getSelectedItem().toString();
        if (selectedValue.toLowerCase().equals("allergies")) {
            for (String st : user.getMedicalProfile().getAllergyList()) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("currentmedication")) {
            for (String st : user.getMedicalProfile().getCurrentMedicationList()) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("pastmedication")) {
            for (String st : user.getMedicalProfile().getPastMedicationList()) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("chronicdisease")) {
            for (String st : user.getMedicalProfile().getChronicDiseaseList()) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("surgeries")) {
            for (String st : user.getMedicalProfile().getSurgeriesyList()) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        }

    }

    public void populateListTable() {
        DefaultTableModel model = (DefaultTableModel) listTable.getModel();
        model.setRowCount(0);
        selectedValue = jcomboBoxList.getSelectedItem().toString();
        listTable.setEnabled(true);
        addedTable.setEnabled(true);
        if (selectedValue.toLowerCase().equals("allergies")) {
            List<String> allergyList = Arrays.asList("Lactose", "Soy", "Seafood", "Nuts", "Eggs", "Fish");
            for (String st : allergyList) {
                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("currentmedication")) {
            List<String> allergyList = Arrays.asList("Atm a gel 15gm", "Nadoxin a gel 15ml", "Calak a lotion 100ml", "trump a syrup 100 ml", "Alorex a cream 20gm", "Glintra a gel 15ml");
            for (String st : allergyList) {

                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("pastmedication")) {
            List<String> allergyList = Arrays.asList("Atm a gel 15gm", "Nadoxin a gel 15ml", "Calak a lotion 100ml", "trump a syrup 100 ml", "Alorex a cream 20gm", "Glintra a gel 15ml");
            for (String st : allergyList) {

                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("chronicdisease")) {
            List<String> allergyList = Arrays.asList("Diabetes", "Hypertension", "PCOS", "COPD", "Asthama", "Heart disease");
            for (String st : allergyList) {

                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        } else if (selectedValue.toLowerCase().equals("surgeries")) {
            List<String> allergyList = Arrays.asList("Heart", "Liver", "Kidney", "Lungs", "Brain", " cosmetic");
            for (String st : allergyList) {

                Object[] row = new Object[1];
                row[0] = st;
                model.addRow(row);
            }
        }
    }
}
