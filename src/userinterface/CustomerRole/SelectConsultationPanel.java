/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Shop.Product;
import Business.Shop.ProductDirectory;
import Business.Shop.Shop;
import Business.Staff.Sessions;
import Business.Staff.SessionsMedStaff;
import Business.Staff.Staff;
import Business.User.User;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderItem;
import Business.WorkQueue.OrderList;
import constants.Utils;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.StaffRole.AddHospStaffSessionsPanel;

/**
 *
 * @author khushbu
 */
public class SelectConsultationPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderMedicinePanel
     */
    private JPanel mainWorkArea;
    private EcoSystem ecosystem;
    private Staff staff;
    private User user;
    private SessionsMedStaff sess;
    private UserAccount userAccount;
    static LocalDateTime now;
    Date date1 = null;
    //SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, YYYY", Locale.US);
    DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
    private ArrayList<OrderItem> orderList = new ArrayList<OrderItem>();

    Utils utils;
    Date date;
    DefaultTableModel model;

    public SelectConsultationPanel(JPanel mainPanel, EcoSystem ecosystem, Staff shop, UserAccount userAccount) {
        this.mainWorkArea = mainPanel;
        this.ecosystem = ecosystem;
        this.staff = shop;
        this.userAccount = userAccount;
        this.user = (User) userAccount;
        utils = new Utils();
        initComponents();

        date = new Date();

        try {
            //DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/YYYY");
            date = formatter.parse(formatter.format(date));
        } catch (ParseException ex) {
            Logger.getLogger(AddHospStaffSessionsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
//        now = LocalDateTime.now();
//        System.out.println(now);
        populateData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblPageTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblConsultaionSlot = new javax.swing.JTable();
        btnPlaceOrder = new javax.swing.JButton();
        comboSessionType = new javax.swing.JComboBox<>();
        lblShipmentType = new javax.swing.JLabel();

        setBackground(new java.awt.Color(244, 249, 249));

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/back.png"))); // NOI18N
        btnBack.setText("Back");
        btnBack.setToolTipText("");
        btnBack.setActionCommand("University");
        btnBack.setAlignmentY(0.0F);
        btnBack.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true), new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true)));
        btnBack.setBorderPainted(false);
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnBack.setIconTextGap(10);
        btnBack.setMargin(new java.awt.Insets(10, 5, 0, 2));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblPageTitle.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblPageTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPageTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/dinner.png"))); // NOI18N
        lblPageTitle.setText("Consultation Slot");

        tblConsultaionSlot.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        tblConsultaionSlot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Sr No.", "Session Name", "Date", "Start-time", "End-time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConsultaionSlot.setSelectionBackground(new java.awt.Color(0, 102, 204));
        jScrollPane1.setViewportView(tblConsultaionSlot);

        btnPlaceOrder.setBackground(new java.awt.Color(138, 177, 138));
        btnPlaceOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/save.png"))); // NOI18N
        btnPlaceOrder.setText("Book Slots");
        btnPlaceOrder.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 255, 255), 1, true));
        btnPlaceOrder.setBorderPainted(false);
        btnPlaceOrder.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });

        comboSessionType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Remote", "In-Person" }));
        comboSessionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSessionTypeActionPerformed(evt);
            }
        });

        lblShipmentType.setBackground(new java.awt.Color(249, 244, 244));
        lblShipmentType.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblShipmentType.setText("Select Attendence type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblShipmentType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboSessionType, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(91, 91, 91))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(199, 199, 199)
                                .addComponent(lblPageTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(btnPlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(300, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(lblPageTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(lblShipmentType)
                .addGap(12, 12, 12)
                .addComponent(comboSessionType, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110)
                .addComponent(btnPlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(418, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private SessionsMedStaff getSelectedSession() {
        int selectedRowIndex = tblConsultaionSlot.getSelectedRow();

        if (selectedRowIndex < 0) {
            utils.showErrorToast("Oops! Please select a Session first.");
            return null;
        }

        SessionsMedStaff p = (SessionsMedStaff) tblConsultaionSlot.getValueAt(selectedRowIndex, 1);

        return p;
    }

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // back btn logic
        backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        sess = getSelectedSession();
        if (sess != null) {
            User user = ecosystem.getUserDirectory().getUserByUserName(userAccount.getUsername());
            ArrayList<SessionsMedStaff> userSessionList = user.getConsultationSessions().getSession();
            int count = 0;
            String sessionType = comboSessionType.getSelectedItem().toString();
            if (staff.getSessionDirectory().getSession().contains(sess)) {
                if (!sessionType.equalsIgnoreCase("remote") && sess.getIsRemote().equalsIgnoreCase("yes")) {
                    utils.showErrorToast("This session only for Remote");
                } else if (!sessionType.equalsIgnoreCase("in-person") && sess.getIsRemote().equalsIgnoreCase("no")) {
                    utils.showErrorToast("This session only for In-Persion");
                } else {
                    for (SessionsMedStaff s : userSessionList) {
                        if (s.getSessionDate().equalsIgnoreCase(sess.getSessionDate())) {
                            count = count + 1;
                        }
                    }
                    if (count > 3) {
                        utils.showErrorToast("Booking limit for " + staff.getName() + "exceded for the day");
                    } else {
                        sess.setIsRemote(sessionType);
//                   staff.getConsultationDirectory().addSession(sess);
//                    user.getConsultationSessions().addSession(sess);
//                    staff.getSessionDirectory().removeSession(sess);
                        JOptionPane.showMessageDialog(this, "Your Consultation with " + staff.getName() + " Selected successfully",
                                "Success", JOptionPane.INFORMATION_MESSAGE);
                        goToConsultFormDataPage();
                        String emailSubject = "Care4U Consultation Information";
                        String emailBodyMessage = "Hi, " + user.getName() + " " + "Your Consultation with " + staff.getName() + " booked successfully";
                        utils.sendEmail(user.getEmail(), emailSubject, emailBodyMessage, false);
                        utils.setDatabase(ecosystem);
                    }
                }
            } else {
                utils.showErrorToast("Sorry!!, This slot has been booked, Please select other slots");
                populateData();
            }
        }


    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void comboSessionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSessionTypeActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_comboSessionTypeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JComboBox<String> comboSessionType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPageTitle;
    private javax.swing.JLabel lblShipmentType;
    private javax.swing.JTable tblConsultaionSlot;
    // End of variables declaration//GEN-END:variables

    private void backAction() {
        mainWorkArea.remove(this);
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.previous(mainWorkArea);
    }

    private void populateData() {
        ArrayList<SessionsMedStaff> tempList = staff.getSessionDirectory().getSession();
        for (SessionsMedStaff s : tempList) {
            try {
                String st1 = s.getSessionDate();
                date1 = (Date) formatter.parse(st1);
            } catch (ParseException ex) {
                Logger.getLogger(SelectConsultationPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (date1.before(date)) {
                tempList.remove(s);
            }
//            else{
//                String startTime = s.getStartTime();
//                Boolean f = utils.testTime(startTime.split(":")[0]);
//                if(!f){
//                    tempList.remove(s);
//                }
//            else {
//        DefaultTableModel model = (DefaultTableModel) tblConsultaionSlot.getModel();
//
//        int count = 1;
//        model.setRowCount(0);
//
//        for (SessionsMedStaff p : tempList) {
//            Object[] row = new Object[5];
//            row[0] = "" + count++;
//            row[1] = p;
//            row[2] = p.getSessionDate();
//            row[3] = p.getStartTime();
//            row[4] = p.getEndTime();
//            model.addRow(row);
//        }
//                }
            //}
        }
        //DateFormat formatter = new SimpleDateFormat("yyyy-MM-DD"); 

        DefaultTableModel model = (DefaultTableModel) tblConsultaionSlot.getModel();

        int count = 1;
        model.setRowCount(0);

        for (SessionsMedStaff p : tempList) {
            Object[] row = new Object[5];
            row[0] = "" + count++;
            row[1] = p;
            row[2] = p.getSessionDate();
            row[3] = p.getStartTime();
            row[4] = p.getEndTime();
            model.addRow(row);
        }
    }

    private void goToConsultFormDataPage() {
        ConsultationFormPatient bookConsultationPanel = new ConsultationFormPatient(mainWorkArea, ecosystem, user, staff, sess);
        mainWorkArea.add("bookConsultationPanel", bookConsultationPanel);
        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.next(mainWorkArea);
    }

    private void openOrderHistory() {

        ManageUserOrderHistory manageUserOrderHistory = new ManageUserOrderHistory(mainWorkArea, ecosystem, userAccount);

        mainWorkArea.add("ManageOrderHistory", manageUserOrderHistory);

        CardLayout layout = (CardLayout) mainWorkArea.getLayout();
        layout.next(mainWorkArea);
    }

}
